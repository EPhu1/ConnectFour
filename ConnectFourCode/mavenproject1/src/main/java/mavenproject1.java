
import java.awt.Color;
import java.io.File;
import javax.swing.JFrame;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Evanp
 */
public class mavenproject1 extends javax.swing.JFrame {

    /**
     * Creates new form mavenproject1
     */
    ConnectFour connectFour;
    int blueScore;
    int redScore;
    int lastrow;
    int lastcolumn;
    public mavenproject1() {
        initComponents();
        connectFour = new ConnectFour();
        blueScore = 0;
        redScore = 0;
        lastrow = 0;
        lastcolumn = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jMenuItem4 = new javax.swing.JMenuItem();
        redScoreTextField = new javax.swing.JTextField();
        column1 = new javax.swing.JPanel();
        border1 = new javax.swing.JPanel();
        square2 = new javax.swing.JPanel();
        square6 = new javax.swing.JPanel();
        square4 = new javax.swing.JPanel();
        square5 = new javax.swing.JPanel();
        square3 = new javax.swing.JPanel();
        square1 = new javax.swing.JPanel();
        column2 = new javax.swing.JPanel();
        border2 = new javax.swing.JPanel();
        square8 = new javax.swing.JPanel();
        square12 = new javax.swing.JPanel();
        square10 = new javax.swing.JPanel();
        square11 = new javax.swing.JPanel();
        square9 = new javax.swing.JPanel();
        square7 = new javax.swing.JPanel();
        column3 = new javax.swing.JPanel();
        border3 = new javax.swing.JPanel();
        square14 = new javax.swing.JPanel();
        square18 = new javax.swing.JPanel();
        square16 = new javax.swing.JPanel();
        square17 = new javax.swing.JPanel();
        square15 = new javax.swing.JPanel();
        square13 = new javax.swing.JPanel();
        column4 = new javax.swing.JPanel();
        border4 = new javax.swing.JPanel();
        square20 = new javax.swing.JPanel();
        square24 = new javax.swing.JPanel();
        square22 = new javax.swing.JPanel();
        square23 = new javax.swing.JPanel();
        square21 = new javax.swing.JPanel();
        square19 = new javax.swing.JPanel();
        column5 = new javax.swing.JPanel();
        border5 = new javax.swing.JPanel();
        square26 = new javax.swing.JPanel();
        square30 = new javax.swing.JPanel();
        square28 = new javax.swing.JPanel();
        square29 = new javax.swing.JPanel();
        square27 = new javax.swing.JPanel();
        square25 = new javax.swing.JPanel();
        column6 = new javax.swing.JPanel();
        square32 = new javax.swing.JPanel();
        square36 = new javax.swing.JPanel();
        square34 = new javax.swing.JPanel();
        square35 = new javax.swing.JPanel();
        square33 = new javax.swing.JPanel();
        square31 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        columnButton1 = new javax.swing.JButton();
        columnButton2 = new javax.swing.JButton();
        columnButton3 = new javax.swing.JButton();
        columnButton4 = new javax.swing.JButton();
        columnButton5 = new javax.swing.JButton();
        columnButton6 = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        gameStatusTextField = new javax.swing.JTextField();
        blueScoreTextField = new javax.swing.JTextField();
        fileChooser = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        Restart2 = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        restart = new javax.swing.JMenuItem();
        load = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 166, Short.MAX_VALUE)
        );

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(386, 320));
        setPreferredSize(new java.awt.Dimension(415, 380));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        redScoreTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        redScoreTextField.setText("Red Score: 0");
        redScoreTextField.setToolTipText("");
        redScoreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redScoreTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(redScoreTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 270, 120, 37));

        column1.setBackground(new java.awt.Color(255, 255, 255));
        column1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        column1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        border1.setBackground(new java.awt.Color(0, 0, 0));
        border1.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout border1Layout = new javax.swing.GroupLayout(border1);
        border1.setLayout(border1Layout);
        border1Layout.setHorizontalGroup(
            border1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        border1Layout.setVerticalGroup(
            border1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        column1.add(border1, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 5, -1, 170));

        square2.setBackground(new java.awt.Color(255, 255, 255));
        square2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square2Layout = new javax.swing.GroupLayout(square2);
        square2.setLayout(square2Layout);
        square2Layout.setHorizontalGroup(
            square2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square2Layout.setVerticalGroup(
            square2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column1.add(square2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        square6.setBackground(new java.awt.Color(255, 255, 255));
        square6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square6Layout = new javax.swing.GroupLayout(square6);
        square6.setLayout(square6Layout);
        square6Layout.setHorizontalGroup(
            square6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square6Layout.setVerticalGroup(
            square6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column1.add(square6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        square4.setBackground(new java.awt.Color(255, 255, 255));
        square4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square4Layout = new javax.swing.GroupLayout(square4);
        square4.setLayout(square4Layout);
        square4Layout.setHorizontalGroup(
            square4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square4Layout.setVerticalGroup(
            square4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column1.add(square4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        square5.setBackground(new java.awt.Color(255, 255, 255));
        square5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square5Layout = new javax.swing.GroupLayout(square5);
        square5.setLayout(square5Layout);
        square5Layout.setHorizontalGroup(
            square5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square5Layout.setVerticalGroup(
            square5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column1.add(square5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 24, -1, -1));

        square3.setBackground(new java.awt.Color(255, 255, 255));
        square3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square3Layout = new javax.swing.GroupLayout(square3);
        square3.setLayout(square3Layout);
        square3Layout.setHorizontalGroup(
            square3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square3Layout.setVerticalGroup(
            square3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column1.add(square3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 75, -1, -1));

        square1.setBackground(new java.awt.Color(255, 255, 255));
        square1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square1Layout = new javax.swing.GroupLayout(square1);
        square1.setLayout(square1Layout);
        square1Layout.setHorizontalGroup(
            square1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square1Layout.setVerticalGroup(
            square1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column1.add(square1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, -1, -1));

        getContentPane().add(column1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 35, -1, 160));

        column2.setBackground(new java.awt.Color(255, 255, 255));
        column2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        column2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        border2.setBackground(new java.awt.Color(0, 0, 0));
        border2.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout border2Layout = new javax.swing.GroupLayout(border2);
        border2.setLayout(border2Layout);
        border2Layout.setHorizontalGroup(
            border2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        border2Layout.setVerticalGroup(
            border2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        column2.add(border2, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 5, -1, 170));

        square8.setBackground(new java.awt.Color(255, 255, 255));
        square8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square8Layout = new javax.swing.GroupLayout(square8);
        square8.setLayout(square8Layout);
        square8Layout.setHorizontalGroup(
            square8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square8Layout.setVerticalGroup(
            square8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column2.add(square8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        square12.setBackground(new java.awt.Color(255, 255, 255));
        square12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square12Layout = new javax.swing.GroupLayout(square12);
        square12.setLayout(square12Layout);
        square12Layout.setHorizontalGroup(
            square12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square12Layout.setVerticalGroup(
            square12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column2.add(square12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        square10.setBackground(new java.awt.Color(255, 255, 255));
        square10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square10Layout = new javax.swing.GroupLayout(square10);
        square10.setLayout(square10Layout);
        square10Layout.setHorizontalGroup(
            square10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square10Layout.setVerticalGroup(
            square10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column2.add(square10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        square11.setBackground(new java.awt.Color(255, 255, 255));
        square11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square11Layout = new javax.swing.GroupLayout(square11);
        square11.setLayout(square11Layout);
        square11Layout.setHorizontalGroup(
            square11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square11Layout.setVerticalGroup(
            square11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column2.add(square11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 24, -1, -1));

        square9.setBackground(new java.awt.Color(255, 255, 255));
        square9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square9Layout = new javax.swing.GroupLayout(square9);
        square9.setLayout(square9Layout);
        square9Layout.setHorizontalGroup(
            square9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square9Layout.setVerticalGroup(
            square9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column2.add(square9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 75, -1, -1));

        square7.setBackground(new java.awt.Color(255, 255, 255));
        square7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square7Layout = new javax.swing.GroupLayout(square7);
        square7.setLayout(square7Layout);
        square7Layout.setHorizontalGroup(
            square7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square7Layout.setVerticalGroup(
            square7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column2.add(square7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, -1, -1));

        getContentPane().add(column2, new org.netbeans.lib.awtextra.AbsoluteConstraints(115, 35, -1, 160));

        column3.setBackground(new java.awt.Color(255, 255, 255));
        column3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        column3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        border3.setBackground(new java.awt.Color(0, 0, 0));
        border3.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout border3Layout = new javax.swing.GroupLayout(border3);
        border3.setLayout(border3Layout);
        border3Layout.setHorizontalGroup(
            border3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        border3Layout.setVerticalGroup(
            border3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        column3.add(border3, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 5, -1, 170));

        square14.setBackground(new java.awt.Color(255, 255, 255));
        square14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square14Layout = new javax.swing.GroupLayout(square14);
        square14.setLayout(square14Layout);
        square14Layout.setHorizontalGroup(
            square14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square14Layout.setVerticalGroup(
            square14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column3.add(square14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        square18.setBackground(new java.awt.Color(255, 255, 255));
        square18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square18Layout = new javax.swing.GroupLayout(square18);
        square18.setLayout(square18Layout);
        square18Layout.setHorizontalGroup(
            square18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square18Layout.setVerticalGroup(
            square18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column3.add(square18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        square16.setBackground(new java.awt.Color(255, 255, 255));
        square16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square16Layout = new javax.swing.GroupLayout(square16);
        square16.setLayout(square16Layout);
        square16Layout.setHorizontalGroup(
            square16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square16Layout.setVerticalGroup(
            square16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column3.add(square16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        square17.setBackground(new java.awt.Color(255, 255, 255));
        square17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square17Layout = new javax.swing.GroupLayout(square17);
        square17.setLayout(square17Layout);
        square17Layout.setHorizontalGroup(
            square17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square17Layout.setVerticalGroup(
            square17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column3.add(square17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 24, -1, -1));

        square15.setBackground(new java.awt.Color(255, 255, 255));
        square15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square15Layout = new javax.swing.GroupLayout(square15);
        square15.setLayout(square15Layout);
        square15Layout.setHorizontalGroup(
            square15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square15Layout.setVerticalGroup(
            square15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column3.add(square15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 75, -1, -1));

        square13.setBackground(new java.awt.Color(255, 255, 255));
        square13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square13Layout = new javax.swing.GroupLayout(square13);
        square13.setLayout(square13Layout);
        square13Layout.setHorizontalGroup(
            square13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square13Layout.setVerticalGroup(
            square13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column3.add(square13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, -1, -1));

        getContentPane().add(column3, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 35, -1, 160));

        column4.setBackground(new java.awt.Color(255, 255, 255));
        column4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        column4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        border4.setBackground(new java.awt.Color(0, 0, 0));
        border4.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout border4Layout = new javax.swing.GroupLayout(border4);
        border4.setLayout(border4Layout);
        border4Layout.setHorizontalGroup(
            border4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        border4Layout.setVerticalGroup(
            border4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        column4.add(border4, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 5, -1, 170));

        square20.setBackground(new java.awt.Color(255, 255, 255));
        square20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square20Layout = new javax.swing.GroupLayout(square20);
        square20.setLayout(square20Layout);
        square20Layout.setHorizontalGroup(
            square20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square20Layout.setVerticalGroup(
            square20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column4.add(square20, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        square24.setBackground(new java.awt.Color(255, 255, 255));
        square24.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square24Layout = new javax.swing.GroupLayout(square24);
        square24.setLayout(square24Layout);
        square24Layout.setHorizontalGroup(
            square24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square24Layout.setVerticalGroup(
            square24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column4.add(square24, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        square22.setBackground(new java.awt.Color(255, 255, 255));
        square22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square22Layout = new javax.swing.GroupLayout(square22);
        square22.setLayout(square22Layout);
        square22Layout.setHorizontalGroup(
            square22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square22Layout.setVerticalGroup(
            square22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column4.add(square22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        square23.setBackground(new java.awt.Color(255, 255, 255));
        square23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square23Layout = new javax.swing.GroupLayout(square23);
        square23.setLayout(square23Layout);
        square23Layout.setHorizontalGroup(
            square23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square23Layout.setVerticalGroup(
            square23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column4.add(square23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 24, -1, -1));

        square21.setBackground(new java.awt.Color(255, 255, 255));
        square21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square21Layout = new javax.swing.GroupLayout(square21);
        square21.setLayout(square21Layout);
        square21Layout.setHorizontalGroup(
            square21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square21Layout.setVerticalGroup(
            square21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column4.add(square21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 75, -1, -1));

        square19.setBackground(new java.awt.Color(255, 255, 255));
        square19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square19Layout = new javax.swing.GroupLayout(square19);
        square19.setLayout(square19Layout);
        square19Layout.setHorizontalGroup(
            square19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square19Layout.setVerticalGroup(
            square19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column4.add(square19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, -1, -1));

        getContentPane().add(column4, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 35, -1, 160));

        column5.setBackground(new java.awt.Color(255, 255, 255));
        column5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        column5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        border5.setBackground(new java.awt.Color(0, 0, 0));
        border5.setPreferredSize(new java.awt.Dimension(5, 0));

        javax.swing.GroupLayout border5Layout = new javax.swing.GroupLayout(border5);
        border5.setLayout(border5Layout);
        border5Layout.setHorizontalGroup(
            border5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );
        border5Layout.setVerticalGroup(
            border5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 170, Short.MAX_VALUE)
        );

        column5.add(border5, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 5, -1, 170));

        square26.setBackground(new java.awt.Color(255, 255, 255));
        square26.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square26Layout = new javax.swing.GroupLayout(square26);
        square26.setLayout(square26Layout);
        square26Layout.setHorizontalGroup(
            square26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square26Layout.setVerticalGroup(
            square26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column5.add(square26, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        square30.setBackground(new java.awt.Color(255, 255, 255));
        square30.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square30Layout = new javax.swing.GroupLayout(square30);
        square30.setLayout(square30Layout);
        square30Layout.setHorizontalGroup(
            square30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square30Layout.setVerticalGroup(
            square30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column5.add(square30, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        square28.setBackground(new java.awt.Color(255, 255, 255));
        square28.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square28Layout = new javax.swing.GroupLayout(square28);
        square28.setLayout(square28Layout);
        square28Layout.setHorizontalGroup(
            square28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square28Layout.setVerticalGroup(
            square28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column5.add(square28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        square29.setBackground(new java.awt.Color(255, 255, 255));
        square29.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square29Layout = new javax.swing.GroupLayout(square29);
        square29.setLayout(square29Layout);
        square29Layout.setHorizontalGroup(
            square29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square29Layout.setVerticalGroup(
            square29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column5.add(square29, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 24, -1, -1));

        square27.setBackground(new java.awt.Color(255, 255, 255));
        square27.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square27Layout = new javax.swing.GroupLayout(square27);
        square27.setLayout(square27Layout);
        square27Layout.setHorizontalGroup(
            square27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square27Layout.setVerticalGroup(
            square27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column5.add(square27, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 75, -1, -1));

        square25.setBackground(new java.awt.Color(255, 255, 255));
        square25.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square25Layout = new javax.swing.GroupLayout(square25);
        square25.setLayout(square25Layout);
        square25Layout.setHorizontalGroup(
            square25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square25Layout.setVerticalGroup(
            square25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column5.add(square25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, -1, -1));

        getContentPane().add(column5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 35, -1, 160));

        column6.setBackground(new java.awt.Color(255, 255, 255));
        column6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        column6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        square32.setBackground(new java.awt.Color(255, 255, 255));
        square32.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square32Layout = new javax.swing.GroupLayout(square32);
        square32.setLayout(square32Layout);
        square32Layout.setHorizontalGroup(
            square32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square32Layout.setVerticalGroup(
            square32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column6.add(square32, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        square36.setBackground(new java.awt.Color(255, 255, 255));
        square36.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square36Layout = new javax.swing.GroupLayout(square36);
        square36.setLayout(square36Layout);
        square36Layout.setHorizontalGroup(
            square36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square36Layout.setVerticalGroup(
            square36Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column6.add(square36, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        square34.setBackground(new java.awt.Color(255, 255, 255));
        square34.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square34Layout = new javax.swing.GroupLayout(square34);
        square34.setLayout(square34Layout);
        square34Layout.setHorizontalGroup(
            square34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square34Layout.setVerticalGroup(
            square34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column6.add(square34, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        square35.setBackground(new java.awt.Color(255, 255, 255));
        square35.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square35Layout = new javax.swing.GroupLayout(square35);
        square35.setLayout(square35Layout);
        square35Layout.setHorizontalGroup(
            square35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square35Layout.setVerticalGroup(
            square35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column6.add(square35, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 24, -1, -1));

        square33.setBackground(new java.awt.Color(255, 255, 255));
        square33.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square33Layout = new javax.swing.GroupLayout(square33);
        square33.setLayout(square33Layout);
        square33Layout.setHorizontalGroup(
            square33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square33Layout.setVerticalGroup(
            square33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column6.add(square33, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 75, -1, -1));

        square31.setBackground(new java.awt.Color(255, 255, 255));
        square31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        javax.swing.GroupLayout square31Layout = new javax.swing.GroupLayout(square31);
        square31.setLayout(square31Layout);
        square31Layout.setHorizontalGroup(
            square31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        square31Layout.setVerticalGroup(
            square31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        column6.add(square31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 128, -1, -1));

        getContentPane().add(column6, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 35, -1, 160));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ephu1 - ConnectFour");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 270, 20));

        columnButton1.setText("1");
        columnButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(columnButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(72, 200, 40, -1));

        columnButton2.setText("2");
        columnButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(columnButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 40, -1));

        columnButton3.setText("3");
        columnButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(columnButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 200, 40, -1));

        columnButton4.setText("4");
        columnButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(columnButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, 40, -1));

        columnButton5.setText("5");
        columnButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(columnButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 200, 40, -1));

        columnButton6.setText("6");
        columnButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(columnButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 200, 40, -1));

        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });
        getContentPane().add(restartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 120, 38));

        gameStatusTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        gameStatusTextField.setText("Blue Player's Turn");
        gameStatusTextField.setToolTipText("");
        gameStatusTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameStatusTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(gameStatusTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 230, 120, 37));

        blueScoreTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        blueScoreTextField.setText("Blue Score: 0");
        blueScoreTextField.setToolTipText("");
        blueScoreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blueScoreTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(blueScoreTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 230, 120, 37));

        fileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        fileChooser.setOpaque(true);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });
        getContentPane().add(fileChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 20, 0, 300));

        Restart2.setText("Menu");
        Restart2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Restart2ActionPerformed(evt);
            }
        });

        undo.setText("Undo");
        undo.setEnabled(false);
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        Restart2.add(undo);

        restart.setText("Start New Game");
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });
        Restart2.add(restart);

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        Restart2.add(load);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        Restart2.add(save);

        jMenuBar1.add(Restart2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void handleGameStatus(){
        if(connectFour.gameStatus() == -1){
            gameStatusTextField.setText("Game Over - Tie");
        }
        else if(connectFour.gameStatus() == 1){
            gameStatusTextField.setText("Blue Player Wins!");
            columnButton1.setEnabled(false);
            columnButton2.setEnabled(false);
            columnButton3.setEnabled(false);
            columnButton4.setEnabled(false);
            columnButton5.setEnabled(false);
            columnButton6.setEnabled(false);
            blueScore++;
            blueScoreTextField.setText("Blue Score: " + Integer.toString(blueScore));
        }
        else if(connectFour.gameStatus() == 2){
            gameStatusTextField.setText("Red Player Wins!");
            columnButton1.setEnabled(false);
            columnButton2.setEnabled(false);
            columnButton3.setEnabled(false);
            columnButton4.setEnabled(false);
            columnButton5.setEnabled(false);
            columnButton6.setEnabled(false);
            redScore++;
            redScoreTextField.setText("Red Score: " + Integer.toString(redScore));
        }
        else if(connectFour.turn() == 1){
            gameStatusTextField.setText("Blue Player's Turn");
        }
        else if(connectFour.turn() == 2){
            gameStatusTextField.setText("Red Player's Turn");
        }
    }
    private void handleDisabledButtons(){
        undo.setEnabled(true);
        if(connectFour.legalMove(0) == false){
            columnButton1.setEnabled(false);
        }
        if(connectFour.legalMove(1) == false){
            columnButton2.setEnabled(false);
        }
        if(connectFour.legalMove(2) == false){
            columnButton3.setEnabled(false);
        }
        if(connectFour.legalMove(3) == false){
            columnButton4.setEnabled(false);
        }
        if(connectFour.legalMove(4) == false){
            columnButton5.setEnabled(false);
        }
        if(connectFour.legalMove(5) == false){
            columnButton6.setEnabled(false);
        }
    }
    private void handleSquareColor(int col){
        int i;
        for(i = 5; i >= 0; i--){
            if(connectFour.checkPosition(i, col) == 0){
                if(col == 0){
                    if(i == 5){
                        if(connectFour.turn() == 1){
                            square1.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square1.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 4){
                        if(connectFour.turn() == 1){
                            square2.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square2.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 3){
                        if(connectFour.turn() == 1){
                            square3.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square3.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 2){
                        if(connectFour.turn() == 1){
                            square4.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square4.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 1){
                        if(connectFour.turn() == 1){
                            square5.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square5.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 0){
                        if(connectFour.turn() == 1){
                            square6.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square6.setBackground(Color.red);
                        }
                        break;
                    }
                }
                else if(col == 1){
                    if(i == 5){
                        if(connectFour.turn() == 1){
                            square7.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square7.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 4){
                        if(connectFour.turn() == 1){
                            square8.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square8.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 3){
                        if(connectFour.turn() == 1){
                            square9.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square9.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 2){
                        if(connectFour.turn() == 1){
                            square10.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square10.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 1){
                        if(connectFour.turn() == 1){
                            square11.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square11.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 0){
                        if(connectFour.turn() == 1){
                            square12.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square12.setBackground(Color.red);
                        }
                        break;
                    }
                }
                else if(col == 2){
                    if(i == 5){
                        if(connectFour.turn() == 1){
                            square13.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square13.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 4){
                        if(connectFour.turn() == 1){
                            square14.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square14.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 3){
                        if(connectFour.turn() == 1){
                            square15.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square15.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 2){
                        if(connectFour.turn() == 1){
                            square16.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square16.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 1){
                        if(connectFour.turn() == 1){
                            square17.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square17.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 0){
                        if(connectFour.turn() == 1){
                            square18.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square18.setBackground(Color.red);
                        }
                        break;
                    }
                }
                else if(col == 3){
                    if(i == 5){
                        if(connectFour.turn() == 1){
                            square19.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square19.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 4){
                        if(connectFour.turn() == 1){
                            square20.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square20.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 3){
                        if(connectFour.turn() == 1){
                            square21.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square21.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 2){
                        if(connectFour.turn() == 1){
                            square22.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square22.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 1){
                        if(connectFour.turn() == 1){
                            square23.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square23.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 0){
                        if(connectFour.turn() == 1){
                            square24.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square24.setBackground(Color.red);
                        }
                        break;
                    }
                }
                else if(col == 4){
                    if(i == 5){
                        if(connectFour.turn() == 1){
                            square25.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square25.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 4){
                        if(connectFour.turn() == 1){
                            square26.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square26.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 3){
                        if(connectFour.turn() == 1){
                            square27.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square27.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 2){
                        if(connectFour.turn() == 1){
                            square28.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square28.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 1){
                        if(connectFour.turn() == 1){
                            square29.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square29.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 0){
                        if(connectFour.turn() == 1){
                            square30.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square30.setBackground(Color.red);
                        }
                        break;
                    }
                }
                else if(col == 5){
                    if(i == 5){
                        if(connectFour.turn() == 1){
                            square31.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square31.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 4){
                        if(connectFour.turn() == 1){
                            square32.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square32.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 3){
                        if(connectFour.turn() == 1){
                            square33.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square33.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 2){
                        if(connectFour.turn() == 1){
                            square34.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square34.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 1){
                        if(connectFour.turn() == 1){
                            square35.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square35.setBackground(Color.red);
                        }
                        break;
                    }
                    else if(i == 0){
                        if(connectFour.turn() == 1){
                            square36.setBackground(Color.blue);
                        }
                        else if(connectFour.turn() == 2){
                            square36.setBackground(Color.red);
                        }
                        break;
                    }
                }
            }
        }
        lastrow = i;
        lastcolumn = col;
    }
    private void replayGame(){
        gameStatusTextField.setText("Blue Player's Turn");
        columnButton1.setEnabled(true);
        columnButton2.setEnabled(true);
        columnButton3.setEnabled(true);
        columnButton4.setEnabled(true);
        columnButton5.setEnabled(true);
        columnButton6.setEnabled(true);
        connectFour = new ConnectFour();
        square1.setBackground(Color.white);
        square2.setBackground(Color.white);
        square3.setBackground(Color.white);
        square4.setBackground(Color.white);
        square5.setBackground(Color.white);
        square6.setBackground(Color.white);
        square7.setBackground(Color.white);
        square8.setBackground(Color.white);
        square9.setBackground(Color.white);
        square10.setBackground(Color.white);
        square11.setBackground(Color.white);
        square12.setBackground(Color.white);
        square13.setBackground(Color.white);
        square14.setBackground(Color.white);
        square15.setBackground(Color.white);
        square16.setBackground(Color.white);
        square17.setBackground(Color.white);
        square18.setBackground(Color.white);
        square19.setBackground(Color.white);
        square20.setBackground(Color.white);
        square21.setBackground(Color.white);
        square22.setBackground(Color.white);
        square23.setBackground(Color.white);
        square24.setBackground(Color.white);
        square25.setBackground(Color.white);
        square26.setBackground(Color.white);
        square27.setBackground(Color.white);
        square28.setBackground(Color.white);
        square29.setBackground(Color.white);
        square30.setBackground(Color.white);
        square31.setBackground(Color.white);
        square32.setBackground(Color.white);
        square33.setBackground(Color.white);
        square34.setBackground(Color.white);
        square35.setBackground(Color.white);
        square36.setBackground(Color.white);
    }
    private void undo(){
        boolean gameOver = connectFour.gameOver();
        int winner = connectFour.gameStatus();
        connectFour.board[lastrow][lastcolumn] = 0;
        if(gameOver == true){
            if(winner == 2){
                redScore--;
                redScoreTextField.setText("Red Score: " + Integer.toString(redScore));
            }
            else if(winner == 1){
                blueScore--;
                blueScoreTextField.setText("Blue Score: " + Integer.toString(blueScore));
            }
            if(connectFour.legalMove(0) == true){
                columnButton1.setEnabled(true);
            }
            if(connectFour.legalMove(1) == true){
                columnButton2.setEnabled(true);
            }
            if(connectFour.legalMove(2) == true){
                columnButton3.setEnabled(true);
            }
            if(connectFour.legalMove(3) == true){
                columnButton4.setEnabled(true);
            }
            if(connectFour.legalMove(4) == true){
                columnButton5.setEnabled(true);
            }
            if(connectFour.legalMove(5) == true){
                columnButton6.setEnabled(true);
            }
        }
        if(connectFour.turn() == 1){
            gameStatusTextField.setText("Red Player's Turn");
            connectFour.currentPlayer = 2;
        }
        else if(connectFour.turn() == 2){
            gameStatusTextField.setText("Blue Player's Turn");
            connectFour.currentPlayer = 1;
        }
        undo.setEnabled(false);
        if(lastcolumn == 0){
            if(lastrow == 5){
                square1.setBackground(Color.white);
            }
            else if(lastrow == 4){
                square2.setBackground(Color.white);
            }
            else if(lastrow == 3){
                square3.setBackground(Color.white);
            }
            else if(lastrow == 2){
                square4.setBackground(Color.white);
            }
            else if(lastrow == 1){
                square5.setBackground(Color.white);
            }
            else if(lastrow == 0){
                square6.setBackground(Color.white);
                columnButton1.setEnabled(true);
            }
        }
        else if(lastcolumn == 1){
            if(lastrow == 5){
                square7.setBackground(Color.white);
            }
            else if(lastrow == 4){
                square8.setBackground(Color.white);
            }
            else if(lastrow == 3){
                square9.setBackground(Color.white);
            }
            else if(lastrow == 2){
                square10.setBackground(Color.white);
            }
            else if(lastrow == 1){
                square11.setBackground(Color.white);
            }
            else if(lastrow == 0){
                square12.setBackground(Color.white);
                columnButton2.setEnabled(true);
            }
        }
        else if(lastcolumn == 2){
            if(lastrow == 5){
                square13.setBackground(Color.white);
            }
            else if(lastrow == 4){
                square14.setBackground(Color.white);
            }
            else if(lastrow == 3){
                square15.setBackground(Color.white);
            }
            else if(lastrow == 2){
                square16.setBackground(Color.white);
            }
            else if(lastrow == 1){
                square17.setBackground(Color.white);
            }
            else if(lastrow == 0){
                square18.setBackground(Color.white);
                columnButton3.setEnabled(true);
            }
        }
        else if(lastcolumn == 3){
            if(lastrow == 5){
                square19.setBackground(Color.white);
            }
            else if(lastrow == 4){
                square20.setBackground(Color.white);
            }
            else if(lastrow == 3){
                square21.setBackground(Color.white);
            }
            else if(lastrow == 2){
                square22.setBackground(Color.white);
            }
            else if(lastrow == 1){
                square23.setBackground(Color.white);
            }
            else if(lastrow == 0){
                square24.setBackground(Color.white);
                columnButton4.setEnabled(true);
            }
        }
        else if(lastcolumn == 4){
            if(lastrow == 5){
                square25.setBackground(Color.white);
            }
            else if(lastrow == 4){
                square26.setBackground(Color.white);
            }
            else if(lastrow == 3){
                square27.setBackground(Color.white);
            }
            else if(lastrow == 2){
                square28.setBackground(Color.white);
            }
            else if(lastrow == 1){
                square29.setBackground(Color.white);
            }
            else if(lastrow == 0){
                square30.setBackground(Color.white);
                columnButton5.setEnabled(true);
            }
        }
        else if(lastcolumn == 5){
            if(lastrow == 5){
                square31.setBackground(Color.white);
            }
            else if(lastrow == 4){
                square32.setBackground(Color.white);
            }
            else if(lastrow == 3){
                square33.setBackground(Color.white);
            }
            else if(lastrow == 2){
                square34.setBackground(Color.white);
            }
            else if(lastrow == 1){
                square35.setBackground(Color.white);
            }
            else if(lastrow == 0){
                square36.setBackground(Color.white);
                columnButton6.setEnabled(true);
            }
        }
    }
    private void handleLoad(){
        if(connectFour.legalMove(0) == true){
            columnButton1.setEnabled(true);
        }
        if(connectFour.legalMove(1) == true){
            columnButton2.setEnabled(true);
        }
        if(connectFour.legalMove(2) == true){
            columnButton3.setEnabled(true);
        }
        if(connectFour.legalMove(3) == true){
            columnButton4.setEnabled(true);
        }
        if(connectFour.legalMove(4) == true){
            columnButton5.setEnabled(true);
        }
        if(connectFour.legalMove(5) == true){
            columnButton6.setEnabled(true);
        }
        int red = 0;
        int blue = 0;
        for(int i = 0; i < 6; i++){
            for(int j = 0; j < 6; j++){
                if(connectFour.checkPosition(i, j) == 1){
                    blue++;
                }
                else if(connectFour.checkPosition(i, j) == 2){
                    red++;
                }
            }
        }
        if(blue > red){
            gameStatusTextField.setText("Red Player's Turn");
            connectFour.currentPlayer = 2;
        }
        else{
            gameStatusTextField.setText("Blue Player's Turn");
            connectFour.currentPlayer = 1;
        }
        if(connectFour.gameStatus() == -1){
            gameStatusTextField.setText("Game Over - Tie");
        }
        else if(connectFour.gameStatus() == 1){
            gameStatusTextField.setText("Blue Player Wins!");
            columnButton1.setEnabled(false);
            columnButton2.setEnabled(false);
            columnButton3.setEnabled(false);
            columnButton4.setEnabled(false);
            columnButton5.setEnabled(false);
            columnButton6.setEnabled(false);
            blueScore++;
            blueScoreTextField.setText("Blue Score: " + Integer.toString(blueScore));
        }
        else if(connectFour.gameStatus() == 2){
            gameStatusTextField.setText("Red Player Wins!");
            columnButton1.setEnabled(false);
            columnButton2.setEnabled(false);
            columnButton3.setEnabled(false);
            columnButton4.setEnabled(false);
            columnButton5.setEnabled(false);
            columnButton6.setEnabled(false);
            redScore++;
            redScoreTextField.setText("Red Score: " + Integer.toString(redScore));
        }
        
        square1.setBackground(Color.white);
        square2.setBackground(Color.white);
        square3.setBackground(Color.white);
        square4.setBackground(Color.white);
        square5.setBackground(Color.white);
        square6.setBackground(Color.white);
        square7.setBackground(Color.white);
        square8.setBackground(Color.white);
        square9.setBackground(Color.white);
        square10.setBackground(Color.white);
        square11.setBackground(Color.white);
        square12.setBackground(Color.white);
        square13.setBackground(Color.white);
        square14.setBackground(Color.white);
        square15.setBackground(Color.white);
        square16.setBackground(Color.white);
        square17.setBackground(Color.white);
        square18.setBackground(Color.white);
        square19.setBackground(Color.white);
        square20.setBackground(Color.white);
        square21.setBackground(Color.white);
        square22.setBackground(Color.white);
        square23.setBackground(Color.white);
        square24.setBackground(Color.white);
        square25.setBackground(Color.white);
        square26.setBackground(Color.white);
        square27.setBackground(Color.white);
        square28.setBackground(Color.white);
        square29.setBackground(Color.white);
        square30.setBackground(Color.white);
        square31.setBackground(Color.white);
        square32.setBackground(Color.white);
        square33.setBackground(Color.white);
        square34.setBackground(Color.white);
        square35.setBackground(Color.white);
        square36.setBackground(Color.white);
        if(connectFour.checkPosition(0, 5) == 1){
            square36.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(0, 5) == 2){
            square36.setBackground(Color.red);
        }
        if(connectFour.checkPosition(0, 4) == 1){
            square30.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(0, 4) == 2){
            square30.setBackground(Color.red);
        }
        if(connectFour.checkPosition(0, 3) == 1){
            square24.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(0, 3) == 2){
            square24.setBackground(Color.red);
        }
        if(connectFour.checkPosition(0, 2) == 1){
            square18.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(0, 2) == 2){
            square18.setBackground(Color.red);
        }
        if(connectFour.checkPosition(0, 1) == 1){
            square12.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(0, 1) == 2){
            square12.setBackground(Color.red);
        }
        if(connectFour.checkPosition(0, 0) == 1){
            square6.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(0, 0) == 2){
            square6.setBackground(Color.red);
        }
        
        if(connectFour.checkPosition(1, 5) == 1){
            square35.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(1, 5) == 2){
            square35.setBackground(Color.red);
        }
        if(connectFour.checkPosition(1, 4) == 1){
            square29.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(1, 4) == 2){
            square29.setBackground(Color.red);
        }
        if(connectFour.checkPosition(1, 3) == 1){
            square23.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(1, 3) == 2){
            square23.setBackground(Color.red);
        }
        if(connectFour.checkPosition(1, 2) == 1){
            square17.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(1, 2) == 2){
            square17.setBackground(Color.red);
        }
        if(connectFour.checkPosition(1, 1) == 1){
            square11.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(1, 1) == 2){
            square11.setBackground(Color.red);
        }
        if(connectFour.checkPosition(1, 0) == 1){
            square5.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(1, 0) == 2){
            square5.setBackground(Color.red);
        }
        
        if(connectFour.checkPosition(2, 5) == 1){
            square34.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(2, 5) == 2){
            square34.setBackground(Color.red);
        }
        if(connectFour.checkPosition(2, 4) == 1){
            square28.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(2, 4) == 2){
            square28.setBackground(Color.red);
        }
        if(connectFour.checkPosition(2, 3) == 1){
            square22.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(2, 3) == 2){
            square22.setBackground(Color.red);
        }
        if(connectFour.checkPosition(2, 2) == 1){
            square16.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(2, 2) == 2){
            square16.setBackground(Color.red);
        }
        if(connectFour.checkPosition(2, 1) == 1){
            square10.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(2, 1) == 2){
            square10.setBackground(Color.red);
        }
        if(connectFour.checkPosition(2, 0) == 1){
            square4.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(2, 0) == 2){
            square4.setBackground(Color.red);
        }
        
        if(connectFour.checkPosition(3, 5) == 1){
            square33.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(3, 5) == 2){
            square33.setBackground(Color.red);
        }
        if(connectFour.checkPosition(3, 4) == 1){
            square27.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(3, 4) == 2){
            square27.setBackground(Color.red);
        }
        if(connectFour.checkPosition(3, 3) == 1){
            square21.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(3, 3) == 2){
            square21.setBackground(Color.red);
        }
        if(connectFour.checkPosition(3, 2) == 1){
            square15.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(3, 2) == 2){
            square15.setBackground(Color.red);
        }
        if(connectFour.checkPosition(3, 1) == 1){
            square9.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(3, 1) == 2){
            square9.setBackground(Color.red);
        }
        if(connectFour.checkPosition(3, 0) == 1){
            square3.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(3, 0) == 2){
            square3.setBackground(Color.red);
        }
        
        if(connectFour.checkPosition(4, 5) == 1){
            square32.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(4, 5) == 2){
            square32.setBackground(Color.red);
        }
        if(connectFour.checkPosition(4, 4) == 1){
            square26.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(4, 4) == 2){
            square26.setBackground(Color.red);
        }
        if(connectFour.checkPosition(4, 3) == 1){
            square20.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(4, 3) == 2){
            square20.setBackground(Color.red);
        }
        if(connectFour.checkPosition(4, 2) == 1){
            square14.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(4, 2) == 2){
            square14.setBackground(Color.red);
        }
        if(connectFour.checkPosition(4, 1) == 1){
            square8.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(4, 1) == 2){
            square8.setBackground(Color.red);
        }
        if(connectFour.checkPosition(4, 0) == 1){
            square2.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(4, 0) == 2){
            square2.setBackground(Color.red);
        }
        
        if(connectFour.checkPosition(5, 0) == 1){
            square1.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(5, 0) == 2){
            square1.setBackground(Color.red);
        }
        if(connectFour.checkPosition(5, 1) == 1){
            square7.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(5, 1) == 2){
            square7.setBackground(Color.red);
        }
        if(connectFour.checkPosition(5, 2) == 1){
            square13.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(5, 2) == 2){
            square13.setBackground(Color.red);
        }
        if(connectFour.checkPosition(5, 3) == 1){
            square19.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(5, 3) == 2){
            square19.setBackground(Color.red);
        }
        if(connectFour.checkPosition(5, 4) == 1){
            square25.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(5, 4) == 2){
            square25.setBackground(Color.red);
        }
        if(connectFour.checkPosition(5, 5) == 1){
            square31.setBackground(Color.blue);
        }
        else if(connectFour.checkPosition(5, 5) == 2){
            square31.setBackground(Color.red);
        }
    }
    private void redScoreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redScoreTextFieldActionPerformed
    
    }//GEN-LAST:event_redScoreTextFieldActionPerformed

    private void columnButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnButton6ActionPerformed
        handleSquareColor(5);
        connectFour.makeMove(5);
        handleGameStatus();
        handleDisabledButtons();
    }//GEN-LAST:event_columnButton6ActionPerformed

    private void columnButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnButton1ActionPerformed
        handleSquareColor(0);
        connectFour.makeMove(0);
        handleGameStatus();
        handleDisabledButtons();
    }//GEN-LAST:event_columnButton1ActionPerformed

    private void columnButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnButton2ActionPerformed
        handleSquareColor(1);
        connectFour.makeMove(1);
        handleGameStatus();
        handleDisabledButtons();
    }//GEN-LAST:event_columnButton2ActionPerformed

    private void columnButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnButton3ActionPerformed
        handleSquareColor(2);
        connectFour.makeMove(2);
        handleGameStatus();
        handleDisabledButtons();
    }//GEN-LAST:event_columnButton3ActionPerformed

    private void columnButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnButton4ActionPerformed
        handleSquareColor(3);
        connectFour.makeMove(3);
        handleGameStatus();
        handleDisabledButtons();
    }//GEN-LAST:event_columnButton4ActionPerformed

    private void columnButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnButton5ActionPerformed
        handleSquareColor(4);
        connectFour.makeMove(4);
        handleGameStatus();
        handleDisabledButtons();
    }//GEN-LAST:event_columnButton5ActionPerformed

    private void gameStatusTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameStatusTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gameStatusTextFieldActionPerformed

    private void blueScoreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blueScoreTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blueScoreTextFieldActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
                replayGame();
//        connectFour.saveBoard("Lab4_Output.txt");
//        connectFour.loadBoard("LAB3_INPUT.txt");
//        System.out.println(connectFour);
    }//GEN-LAST:event_restartButtonActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        replayGame();
    }//GEN-LAST:event_restartActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        undo();
    }//GEN-LAST:event_undoActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        int result = fileChooser.showOpenDialog(this);
    }//GEN-LAST:event_loadActionPerformed

    private void Restart2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Restart2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Restart2ActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        
        if(fileChooser.getDialogType() == 0){
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            System.out.println(path);
            connectFour.loadBoard(path);
            handleLoad();
        }
        else if(fileChooser.getDialogType() == 1){
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            String filename = fileChooser.getSelectedFile().getName();
            connectFour.saveBoard(path);
        }
    }//GEN-LAST:event_fileChooserActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        int result = fileChooser.showSaveDialog(this);
    }//GEN-LAST:event_saveActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mavenproject1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Restart2;
    private javax.swing.JTextField blueScoreTextField;
    private javax.swing.JPanel border1;
    private javax.swing.JPanel border2;
    private javax.swing.JPanel border3;
    private javax.swing.JPanel border4;
    private javax.swing.JPanel border5;
    private javax.swing.JPanel column1;
    private javax.swing.JPanel column2;
    private javax.swing.JPanel column3;
    private javax.swing.JPanel column4;
    private javax.swing.JPanel column5;
    private javax.swing.JPanel column6;
    private javax.swing.JButton columnButton1;
    private javax.swing.JButton columnButton2;
    private javax.swing.JButton columnButton3;
    private javax.swing.JButton columnButton4;
    private javax.swing.JButton columnButton5;
    private javax.swing.JButton columnButton6;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JTextField gameStatusTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JMenuItem load;
    private javax.swing.JTextField redScoreTextField;
    private javax.swing.JMenuItem restart;
    private javax.swing.JButton restartButton;
    private javax.swing.JMenuItem save;
    private javax.swing.JPanel square1;
    private javax.swing.JPanel square10;
    private javax.swing.JPanel square11;
    private javax.swing.JPanel square12;
    private javax.swing.JPanel square13;
    private javax.swing.JPanel square14;
    private javax.swing.JPanel square15;
    private javax.swing.JPanel square16;
    private javax.swing.JPanel square17;
    private javax.swing.JPanel square18;
    private javax.swing.JPanel square19;
    private javax.swing.JPanel square2;
    private javax.swing.JPanel square20;
    private javax.swing.JPanel square21;
    private javax.swing.JPanel square22;
    private javax.swing.JPanel square23;
    private javax.swing.JPanel square24;
    private javax.swing.JPanel square25;
    private javax.swing.JPanel square26;
    private javax.swing.JPanel square27;
    private javax.swing.JPanel square28;
    private javax.swing.JPanel square29;
    private javax.swing.JPanel square3;
    private javax.swing.JPanel square30;
    private javax.swing.JPanel square31;
    private javax.swing.JPanel square32;
    private javax.swing.JPanel square33;
    private javax.swing.JPanel square34;
    private javax.swing.JPanel square35;
    private javax.swing.JPanel square36;
    private javax.swing.JPanel square4;
    private javax.swing.JPanel square5;
    private javax.swing.JPanel square6;
    private javax.swing.JPanel square7;
    private javax.swing.JPanel square8;
    private javax.swing.JPanel square9;
    private javax.swing.JMenuItem undo;
    // End of variables declaration//GEN-END:variables
}
